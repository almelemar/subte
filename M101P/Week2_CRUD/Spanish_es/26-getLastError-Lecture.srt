1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:00,710
OK.

3
00:00:00,710 --> 00:00:02,310
So now we've learned the
basic CRUD operations

4
00:00:02,310 --> 00:00:04,090
that MongoDB offers--

5
00:00:04,090 --> 00:00:07,530
Insert, Find, Update,
and Remove.

6
00:00:07,530 --> 00:00:09,290
However, there's a little bit
more that you need to know

7
00:00:09,290 --> 00:00:12,960
about the exact details of
operations into MongoDB.

8
00:00:12,960 --> 00:00:15,700
The shell is an interactive
environment, and so it gives

9
00:00:15,700 --> 00:00:18,380
you information whenever
something goes wrong.

10
00:00:18,380 --> 00:00:22,800
For example, I mentioned before
that the _id field is a

11
00:00:22,800 --> 00:00:23,800
primary key.

12
00:00:23,800 --> 00:00:26,660
It is required to be present,
it's required to be unique,

13
00:00:26,660 --> 00:00:29,220
and we actually make it
immutable, in addition.

14
00:00:29,220 --> 00:00:31,850
If I insert a document with a
particular primary key, let's

15
00:00:31,850 --> 00:00:32,780
say "Smith".

16
00:00:32,780 --> 00:00:35,810
Well, I have reason to believe
that a document got inserted.

17
00:00:35,810 --> 00:00:37,000
I'll tell you a little
bit more about how

18
00:00:37,000 --> 00:00:38,320
you can confirm that.

19
00:00:38,320 --> 00:00:41,590
If I try to insert a second
document with name "Smith",

20
00:00:41,590 --> 00:00:43,990
the shell will give me an
error message back.

21
00:00:43,990 --> 00:00:47,510
In fact, the interactive shell
always checks to see whether

22
00:00:47,510 --> 00:00:50,250
the last operation succeeded
or failed and tells you

23
00:00:50,250 --> 00:00:52,480
immediately if it failed.

24
00:00:52,480 --> 00:00:55,410
So far, I haven't shown you
any operations that fail.

25
00:00:55,410 --> 00:00:57,400
This was a little bit of
malice of forethought.

26
00:00:57,400 --> 00:00:59,340
However, you control
programatically check whether

27
00:00:59,340 --> 00:01:02,610
an operation succeeded or failed
by running a command.

28
00:01:02,610 --> 00:01:04,330
We've actually use some
commands already.

29
00:01:04,330 --> 00:01:06,410
For instance, Count is
actually a command.

30
00:01:06,410 --> 00:01:09,440
In any case, there's a command
called "getLastError", which

31
00:01:09,440 --> 00:01:12,600
returns the outcome of the last
right operation that was

32
00:01:12,600 --> 00:01:15,120
sent on the connection that
you're currently using.

33
00:01:15,120 --> 00:01:18,280
The result of getLastError is a
document, and in case of an

34
00:01:18,280 --> 00:01:21,860
error scenario, the document has
a field E-R-R that has a

35
00:01:21,860 --> 00:01:24,720
non-null value containing
an error message.

36
00:01:24,720 --> 00:01:28,010
Most errors also have a unique
integer code, which is given

37
00:01:28,010 --> 00:01:29,510
the code field.

38
00:01:29,510 --> 00:01:32,460
getLastError is available both
in the shell and in all of our

39
00:01:32,460 --> 00:01:34,810
drivers as a way of checking
whether a write operation

40
00:01:34,810 --> 00:01:36,120
succeed or failed.

41
00:01:36,120 --> 00:01:38,440
In the event that a write
operation succeeds, for

42
00:01:38,440 --> 00:01:42,330
example, I'll insert another
document with a different _id.

43
00:01:42,330 --> 00:01:45,240
In that case, the getLastError
command will tell me that the

44
00:01:45,240 --> 00:01:48,800
error is null-- that is to say
that operation succeeded.

45
00:01:48,800 --> 00:01:52,390
For other sorts of operations,
such as updates, getLastError

46
00:01:52,390 --> 00:01:54,300
can tell me the outcome
of the update.

47
00:01:54,300 --> 00:01:56,890
In this case, I will specify an
update that should affect

48
00:01:56,890 --> 00:01:58,390
all documents in the collection

49
00:01:58,390 --> 00:01:59,690
adding a title field.

50
00:01:59,690 --> 00:02:03,050
getLastError, after such an
update, tells me that the

51
00:02:03,050 --> 00:02:05,570
documents that got updated
already existed and that there

52
00:02:05,570 --> 00:02:06,540
were two of them.

53
00:02:06,540 --> 00:02:08,270
This is how I could find out
how many documents got

54
00:02:08,270 --> 00:02:09,949
affected by an update.

55
00:02:09,949 --> 00:02:13,450
By contrast, if instead of doing
a multe-update I ask for

56
00:02:13,450 --> 00:02:14,220
an upsert--

57
00:02:14,220 --> 00:02:16,680
that is to say and update
operation that will either

58
00:02:16,680 --> 00:02:20,340
update a document with name
"Thompson", if one exists, or

59
00:02:20,340 --> 00:02:23,220
else create a document with
name "Thompson" and title

60
00:02:23,220 --> 00:02:25,330
"doctor", if none exists.

61
00:02:25,330 --> 00:02:28,270
After such an upsert operation,
getLastError tells

62
00:02:28,270 --> 00:02:31,700
me that it did not update an
existing document, but instead

63
00:02:31,700 --> 00:02:35,470
upserted a new document who's
_id is returned to me.

64
00:02:35,470 --> 00:02:38,370
So you see the getLastError
command is a way both to find

65
00:02:38,370 --> 00:02:41,470
out whether a write operation
succeeded or failed and also

66
00:02:41,470 --> 00:02:43,530
to get some information about
the successful write

67
00:02:43,530 --> 00:02:45,690
operations that just happened.

68
00:02:45,690 --> 00:02:48,250
Again, the shell automatically
tells you when a write

69
00:02:48,250 --> 00:02:49,470
operation fails.

70
00:02:49,470 --> 00:02:52,010
So so far, I have repeatedly
said that I have reason to

71
00:02:52,010 --> 00:02:54,550
believe that my write operations
were successful.

72
00:02:54,550 --> 00:02:56,230
That reason was simply
that the shell

73
00:02:56,230 --> 00:02:58,090
did not tell me otherwise.

74
00:02:58,090 --> 00:03:00,730
Finally, if I choose to remove
all people from the "people"

75
00:03:00,730 --> 00:03:04,220
collection, the getLastError
command will tell me that

76
00:03:04,220 --> 00:03:05,860
there were three documents
removed.

77
00:03:05,860 --> 00:03:07,550
n equals 3.

78
00:03:07,550 --> 00:03:10,190
We'll see more of the
getLastError command again in

79
00:03:10,190 --> 00:03:11,510
a future part of this course.

80
00:03:11,510 --> 00:03:13,810
For now, you should understand
that it's the way to check

81
00:03:13,810 --> 00:03:15,640
whether a write operation
succeeded or failed.

82
00:03:15,640 --> 00:03:16,890